#!/bin/bash

# NETLIFY CACHE AND RETRY TESTING SCRIPT
# This script automates the complete testing process

set -e

echo "🧪 NETLIFY CACHE & RETRY TESTING AUTOMATION"
echo "==========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
MAIN_BRANCH="main"
TEST_CACHE_BRANCH="test-netlify-cache"
TEST_RETRY_BRANCH="test-netlify-retry"
TEST_FAILURE_BRANCH="test-remote-failures"
TEST_COMBINED_BRANCH="test-cache-retry-combined"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if we're in the right directory
if [[ ! -f "netlify.toml" ]]; then
    print_error "Not in the right directory. Please run from the docs root."
    exit 1
fi

# Check if GitHub CLI is available
if ! command -v gh &> /dev/null; then
    print_error "GitHub CLI (gh) is required but not installed."
    echo "Install it with: brew install gh"
    echo "Then authenticate with: gh auth login"
    exit 1
fi

# Check if authenticated with GitHub
if ! gh auth status &> /dev/null; then
    print_error "Not authenticated with GitHub CLI."
    echo "Run: gh auth login"
    exit 1
fi

print_status "Starting comprehensive Netlify testing..."

# Save current branch
ORIGINAL_BRANCH=$(git branch --show-current)
print_status "Original branch: $ORIGINAL_BRANCH"

# Ensure we're up to date
print_status "Updating main branch..."
git checkout $MAIN_BRANCH
git pull origin $MAIN_BRANCH

echo ""
echo "🔧 PHASE 1: CACHE TESTING"
echo "========================="

# Create cache testing branch
print_status "Creating cache testing branch..."
git checkout -b $TEST_CACHE_BRANCH 2>/dev/null || git checkout $TEST_CACHE_BRANCH

# Copy test configuration for cache testing
cp netlify-test.toml netlify.toml
cp netlify/build-test.sh netlify/build.sh

# Configure for cache testing only
cat > _config_cache_test.yml << 'EOF'
# Cache testing configuration
plugins:
  - jekyll-remote-include

remote_include:
  cache: true
  cache_dir: ".remote-includes-cache"
  cache_ttl: 3600  # 1 hour for testing
  timeout: 30
  retries: 0  # No retries in cache-only test
  debug: true

jekyll_get_json:
  cache_dir: "_data/cached"
  cache_ttl: 3600
EOF

print_status "Committing cache testing configuration..."
git add .
git commit -m "🧪 Test: Enable Netlify build caching

- Add @netlify/plugin-cache-build
- Enable Jekyll remote include caching  
- Add build monitoring and metrics
- Safe for deploy preview testing"

print_status "Pushing cache testing branch..."
git push origin $TEST_CACHE_BRANCH -f

print_status "Creating PR for cache testing..."
gh pr create --title "🧪 Test: Netlify Build Caching" \
  --body "**Testing Netlify build caching mechanism**

This PR tests:
- @netlify/plugin-cache-build configuration
- Jekyll remote include caching  
- Build performance metrics and monitoring

**Expected Results:**
- First build: 8-12 minutes (cache miss)
- Subsequent builds: 3-5 minutes (cache hit)
- 50-70% build time reduction

**Safety:** Deploy preview only - no production impact

Generated by automated testing script." \
  --draft || print_warning "PR creation failed or already exists"

print_success "Cache testing PR created! Deploy preview will build automatically."

echo ""
echo "🔄 PHASE 2: RETRY TESTING"  
echo "========================="

# Create retry testing branch
git checkout $MAIN_BRANCH
git checkout -b $TEST_RETRY_BRANCH 2>/dev/null || git checkout $TEST_RETRY_BRANCH

# Enable retry plugin in config
sed 's/# \[\[plugins\]\]/[[plugins]]/g; s/# \s*package = "@netlify\/plugin-retry-build"/  package = "@netlify\/plugin-retry-build"/g; s/# \s*\[plugins.inputs\]/  [plugins.inputs]/g; s/# \s*retryConditions/    retryConditions/g; s/# \s*maxRetries/    maxRetries/g; s/# \s*retryDelay/    retryDelay/g' netlify-test.toml > netlify.toml

# Copy test build script  
cp netlify/build-test.sh netlify/build.sh

# Add the intentional failure test page
cp test-remote-failure.md docs/

print_status "Committing retry testing configuration..."
git add .
git commit -m "🧪 Test: Enable Netlify build retries + inject failures

- Add @netlify/plugin-retry-build (3 retries, 30s delay)
- Add test page with intentional remote_include failures
- Test DNS failures, 404s, and timeouts
- Verify retry attempts in build logs"

print_status "Pushing retry testing branch..."
git push origin $TEST_RETRY_BRANCH -f

print_status "Creating PR for retry testing..."
gh pr create --title "🧪 Test: Netlify Build Retries + Failure Injection" \
  --body "**Testing Netlify build retry mechanism with intentional failures**

This PR tests:
- @netlify/plugin-retry-build (3 retries, 30s delay)
- Intentional remote_include failures (DNS, 404, timeout)
- Retry attempt logging and recovery

**Intentional Failures Injected:**
- DNS failure: \`non-existent-domain-for-testing.fake\`
- HTTP 404: Invalid GitHub branch path
- Network timeout: 30-second delay endpoint

**Expected Results:**
- Build fails on attempt 1 due to remote include failures
- Retry attempts logged: 'Build attempt X of 3'
- May succeed on retry or fail gracefully (both are valid test results)

**Safety:** Deploy preview only - no production impact" \
  --draft || print_warning "PR creation failed or already exists"

print_success "Retry testing PR created!"

echo ""
echo "💥 PHASE 3: FAILURE INJECTION TESTING"
echo "====================================="

# Create failure testing branch
git checkout -b $TEST_FAILURE_BRANCH 2>/dev/null || git checkout $TEST_FAILURE_BRANCH

# Set environment variable to trigger test failures
cat >> netlify.toml << 'EOF'

# Test failure injection
[build.environment.TEST_FAILURE_MODE]
  NETLIFY_TEST_FAILURE = "true"
  JEKYLL_REMOTE_INCLUDE_FAIL_RATE = "0.5"
EOF

print_status "Committing failure injection test..."
git add .  
git commit -m "🧪 Test: Inject remote include failures

- Enable test failure mode
- 50% artificial failure rate for remote includes
- Should trigger multiple retry attempts
- Tests resilience of retry mechanism"

print_status "Pushing failure injection branch..."
git push origin $TEST_FAILURE_BRANCH -f

print_status "Creating PR for failure injection testing..."
gh pr create --title "🧪 Test: High Failure Rate Injection" \
  --body "**Testing build resilience with high failure rate**

This PR tests:
- 50% artificial failure rate for remote includes
- Multiple retry attempts under stress
- System behavior under adverse network conditions

**Configuration:**
- \`NETLIFY_TEST_FAILURE = true\`
- \`JEKYLL_REMOTE_INCLUDE_FAIL_RATE = 0.5\`
- Should trigger multiple retry attempts

**Expected Results:**
- High retry activity in build logs
- Tests resilience of retry mechanism
- May fail completely (acceptable for stress test)

**Safety:** Deploy preview only - no production impact" \
  --draft || print_warning "PR creation failed or already exists"

print_success "Failure injection PR created!"

echo ""
echo "🎯 PHASE 4: COMBINED TESTING"
echo "============================"

# Create combined testing branch
git checkout $MAIN_BRANCH
git checkout -b $TEST_COMBINED_BRANCH 2>/dev/null || git checkout $TEST_COMBINED_BRANCH

# Use full configuration (cache + retry)
cp netlify-test.toml temp-netlify.toml
sed 's/# \[\[plugins\]\]/[[plugins]]/g; s/# \s*package = "@netlify\/plugin-retry-build"/  package = "@netlify\/plugin-retry-build"/g; s/# \s*\[plugins.inputs\]/  [plugins.inputs]/g; s/# \s*retryConditions/    retryConditions/g; s/# \s*maxRetries/    maxRetries/g; s/# \s*retryDelay/    retryDelay/g' temp-netlify.toml > netlify.toml
rm temp-netlify.toml

# Copy enhanced build script
cp netlify/build-test.sh netlify/build.sh

# Add cache + retry config
cat > _config_combined_test.yml << 'EOF'
# Combined cache + retry testing
plugins:
  - jekyll-remote-include

remote_include:
  cache: true
  cache_dir: ".remote-includes-cache"
  cache_ttl: 3600
  timeout: 30
  retries: 3
  retry_delay: 10
  debug: true

jekyll_get_json:
  cache_dir: "_data/cached"
  cache_ttl: 3600
EOF

print_status "Committing combined testing configuration..."
git add .
git commit -m "🧪 Test: Combined cache + retry system

- Enable both build caching AND retries
- Test optimal configuration for production
- Verify cache performance with retry fallback
- Final validation before production deployment"

print_status "Pushing combined testing branch..."
git push origin $TEST_COMBINED_BRANCH -f

print_status "Creating PR for combined testing..."
gh pr create --title "🧪 Test: Combined Cache + Retry System" \
  --body "**Testing optimal production configuration**

This PR tests:
- Combined build caching AND retry mechanisms
- Optimal configuration for production deployment
- Performance with reliability fallback

**Features Tested:**
- @netlify/plugin-cache-build (build speed)
- @netlify/plugin-retry-build (reliability)
- Jekyll remote include caching
- Comprehensive build monitoring

**Expected Results:**
- 3-5 minute builds with cache hits
- Retry only when network issues occur
- Best performance + reliability combination
- Production-ready configuration validation

**Safety:** Deploy preview only - no production impact

**Next Step:** If successful, deploy to production" \
  --draft || print_warning "PR creation failed or already exists"

print_success "Combined testing PR created!"

echo ""
echo "📊 TESTING SUMMARY"
echo "=================="
print_success "All test branches created and pushed!"
echo ""
echo "Test PRs created (deploy previews will build automatically):"
echo "1. 🗂️  $TEST_CACHE_BRANCH - Cache testing only"
echo "2. 🔄 $TEST_RETRY_BRANCH - Retry testing with failures"  
echo "3. 💥 $TEST_FAILURE_BRANCH - Failure injection testing"
echo "4. 🎯 $TEST_COMBINED_BRANCH - Combined cache + retry"
echo ""
echo "Next steps:"
echo "1. Check GitHub for created PRs (all draft PRs)"
echo "2. Monitor Netlify dashboard for deploy preview builds"
echo "3. Watch build logs for cache hits/misses and retry attempts"
echo "4. Compare build times between different configurations"
echo "5. Review build-report.json in each deploy preview"
echo "6. Run ./analyze-test-results.sh when builds complete"
echo ""
print_warning "Remember: These are all deploy previews - no risk to production!"

# Return to original branch
git checkout $ORIGINAL_BRANCH
print_status "Returned to original branch: $ORIGINAL_BRANCH"

echo ""
print_success "Testing setup complete! Check your Netlify dashboard for deploy previews."